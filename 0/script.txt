Atlassian:
	docker exec -it b1a5e4d0f116 bash
	docker exec -it jira6 ls /
	tail -f log/atlassian-jira/confluence.log

3 machines:

1VM - APACHE+CROWD:
1VM - CONFLUENCE + POSTGRES + PGADMIn
1VM - JIRA

Specification:

4c8G

latest docker installed
reasonably sized disk that docker is using for volumes e.g. 50G each
Pepco:

- root access over ssh (I need the key to use in putty) and normal user called 'techuser'
- APACHE VM should be accessible via URl e.g. atlassian-tools.pepco.pl -> Apache
- Optionally: trusted certificate issued for the above domain

System:_
	
	CentOS Linux release 7.5.1804 (Core)
	NAME="CentOS Linux"
	VERSION="7 (Core)"

Preeequisites:
 
docker, docker-swarm, docker-compose


Kamil:

- Trials licenses (https://my.atlassian.com) for:
- Jira Software (Server): Trial
- Xray Test Management for Jira: Trial
- Confluence (Server): Trial
- Crowd (Server) Unlimited Users: Trial
- Xporter - Export issues from Jira: Trial

START ############################################

INSTALL POSTGRES from DOCKER COMPOSE FILE - 9.6 which is officially supported by JIRA
 
 VM nr 1 : 0. Postgres - 9.6 and pgadmin4 

	cat docker-compose.yml

	version: "3.5"
	services:
	  pgadmin4:
		image: "dpage/pgadmin4"
		container_name: "pgadmin4"
		environment:
		  PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
		  PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
		ports:
		  - "9999:80"
		volumes:
		  - pgadminVolume:/var/lib/pgadmin
		restart: unless-stopped

	  db:
		image: "postgres:9.6"
		container_name: "postgres9.6"
		environment:
		  POSTGRES_USER: ${POSTGRES_USER:-postgres}
		  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
		ports:
		  - "64320:5432"
		volumes:
		  - postgresVolume9.6:/var/lib/postgresql/data
	volumes:
	  postgresVolume9.6:
	  pgadminVolume:

	Uruchom
			docker-compose up -d
			docker-compose logs

			pg_admin bedzie dostepny na adresie:
			
			http://10.44.85.26:9999/browser/
			nowe polaczenie do bazy:
			user postgres:changeme,10.44.85.26:64320
			
	W postgresie:

	1) stworz uzytkownika

	   Login/Group Roles -> Name:pepco, password: pepco, privileges: Can login? true, Save
	 
	2) Stworz bazy

	Create-> Database -> jira/confluence/crowd, owner pepco, collation utf-8

    CONFLUENCE - run from normal image (compose fails): http://10.44.85.26:8090/confluence
	
	docker volume create --name confluenceVolume
	docker volume create --name store
	docker volume create --name confluenceConfigVolume 
	
	BEFORE APACHE IS SET UP
		docker run -e ATL_TOMCAT_CONTEXTPATH=/confluence -v confluenceConfigVolume:/opt/atlassian/confluence/conf -v confluenceVolume:/var/atlassian/application-data/confluence --name="confluence" -d -p 8090:8090 -p 8091:8091 atlassian/confluence-server
		set BaseURl to actual IP: e.g. http://10.44.85.26:8090/confluence, ip addr show
	
	AFTER APACHE IS SET UP
		docker container stop confluence
		docker container rm confluence
		docker run -e ATL_TOMCAT_SCHEME=https -e ATL_PROXY_PORT=443 -e ATL_PROXY_NAME=de-muc-zensus-docker-08 -e ATL_TOMCAT_CONTEXTPATH=/confluence -v confluenceConfigVolume:/opt/atlassian/confluence/conf -v confluenceVolume:/var/atlassian/application-data/confluence --name="confluence" -d -p 8090:8090 -p 8091:8091 atlassian/confluence-server
		set BaseURl to DNS: e.g. http://apache/confluence
	
	TEST
		Create sample space via http://10.44.85.26:8090/confluence	

VM nr 2 - JIRA only

	1. Docker - JIRA (latest) : http://10.44.85.93:8080/jira
		docker volume create --name jiraConfigVolume
		docker volume create --name jiraVolume
		
		BEFORE APACHE IS SET UP
			docker run -e ATL_TOMCAT_CONTEXTPATH=/jira -v jiraConfigVolume:/opt/atlassian/jira/conf -v jiraVolume:/var/atlassian/application-data/jira --name="jira6" -d -p 8080:8080 atlassian/jira-software
			set BaseURl to actual IP: e.g. http://10.44.85.93:8080/jira
		AFTER APACHE IS SET UP
			docker container stop jira6
			docker container rm jira6
			docker run -e  ATL_TOMCAT_SCHEME=https  -e ATL_PROXY_PORT=443 -e ATL_PROXY_NAME=de-muc-zensus-docker-09 -e ATL_TOMCAT_CONTEXTPATH=/jira -v jiraConfigVolume:/opt/atlassian/jira/conf -v jiraVolume:/var/atlassian/application-data/jira --name="jira6" -d -p 8080:8080 atlassian/jira-software
			set BaseURl to DNS: e.g. http://apache/jira
		TEST
			1) check server.xml tomcat config
				docker volume ls
				docker inspect jiraConfigVolume
				cat /var/lib/docker/volumes/jiraConfigVolume/_data/server.xml
			2) Create sample JIRA project
			
	Choose manual config:

			AAABiA0ODAoPeNqNkctOwzAQRff5CktsYGGriQq0lSIBiRcpfakprNgYMy2G1LbGTnl8PWnSQoEWs
		RyPZ+65d46GRpOx9CQKSavbi1q90y5J0hmJWmE3WCCAfjTWArKBkqAd8AflldExH834dDLNch6My
		uU94Hh+4wBdTMMgMdoL6UdiCfFC3KOCgjkvUL7Di3tWF1LYBSyVVkyaZfCkULBfOyYlykfhIBUe4
		jUMDVs0ioINxuzNQr0/GQ+HfJpkl4Nti79ahW87cyGNPpn4UKjiH1A54AowS+Or9LxPeT+/pmc8b
		9PbrHPZEFs0D6X0bF1QZ+b+RSCwSkKtIPZYQvPtcGx7wt3nqgLWHrTQ8oCzP2h+pbrRqXwNsjTnI
		zoI2+2o3emcB1UVf3/5Y3FeBecB47koHARjXAitnKgdJtscSW7ZOzPMBAlC3ft5y6Khua3g1pPRt
		0igco0WldukmYKTqGyt0a9gSL6BIcfNsU7ueoSvRFHWWg39oXPsC3pXfHfua2dTfwCXmBodMCwCF
		Fj5f0QCA44AtUiX8rolysMnbgtqAhR+DPJ3RO5is0DxXogr2qjrGWyh9w==X02j3

		Provide DB connection details
		user pepco:pepco


3. VM CROWD+HTTPD
	
	CROWD:

	crowd does not have a supported docker install atm so we will follow steps for manual installation
	atlassian uses adapt open jdk, so we will download latest version

	as root:

	#DOWNLOAD ADOPT OPEN JDK (Atlassian is using the same):

		wget https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jdk_x64_linux_hotspot_8u222b10.tar.gz
		mkdir -p /opt/openJDK8
		mkdir -p /opt/crowd
		cp OpenJDK8U-jdk_x64_linux_hotspot_8u222b10.tar.gz /opt/openJDK8/
		cd /opt/openJDK8/
		tar -xzvf OpenJDK8U-jdk_x64_linux_hotspot_8u222b10.tar.gz
		chown -R techuser:techuser /opt/*

	#set JAVA for all users

		vi /etc/profile
		export JAVA_HOME=/opt/openJDK8/jdk8u222-b10/
		export PATH=$JAVA_HOME/bin:$PATH

	#restart shell and check JAVA is available to all


	 [root@de-muc-zensus-docker-09 opt]# java -version
	openjdk version "1.8.0_222"
	OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_222-b10)
	OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.222-b10, mixed mode)

	 switch to non-root user 
	 
	Download crowd
	 switch to non-root user
	 su techuser
	 cd /opt/crowd
	 wget  https://product-downloads.atlassian.com/software/crowd/downloads/atlassian-crowd-3.7.0.zip
	 unzip atlassian-crowd-3.7.0.zip

	 [techuser@de-muc-zensus-docker-09 opt]$ ll
	drwxr-xr-x. 9 techuser techuser      4096 Oct  3 12:28 atlassian-crowd-3.7.0
	-rw-r--r--. 1 techuser techuser 212687301 Oct 17 09:13 atlassian.crowd-3.7.0.zip

	 Set CROWD home dir:
	 
	 create /var/crowd-home with owner techuser, check he can write there
	 sudo su -
	 mkdir -p /var/crowd-home
	 chown -R techuser:techuser /var/crowd-home
	 exit
	 cd /opt/crowd
	 vi atlassian-crowd-3.7.0/crowd-webapp/WEB-INF/classes/crowd-init.properties
	 #uncomment line
	 crowd.home=/var/crowd-home
	 test write permissions
	 touch /var/crowd-home/test



	 #connect to postgres - https://confluence.atlassian.com/crowd/postgresql-4030906.html, https://chartio.com/help/data-sources/creating-a-user-with-pgadmin/
	 
	 use db: crowd, pepco:pepco
	 
	[techuser@de-muc-zensus-docker-09 atlassian-crowd-3.7.0]$ ./start_crowd.sh
	To run Crowd in the foreground, start the server with ./start_crowd.sh -fg
	Using CATALINA_BASE:   /opt/atlassian-crowd-3.7.0/apache-tomcat
	Using CATALINA_HOME:   /opt/atlassian-crowd-3.7.0/apache-tomcat
	Using CATALINA_TMPDIR: /opt/atlassian-crowd-3.7.0/apache-tomcat/temp
	Using JRE_HOME:        /opt/openJDK8/jdk8u222-b10/
	Using CLASSPATH:       /opt/atlassian-crowd-3.7.0/apache-tomcat/bin/bootstrap.jar:/opt/atlassian-crowd-3.7.0/apache-tomcat/bin/tomcat-juli.jar
	Using CATALINA_PID:    /opt/atlassian-crowd-3.7.0/apache-tomcat/work/catalina.pid
	Tomcat started.

	WIZARD START
	open IP:8095/crowd

	In crowd:

	Enter License:

	AAABPw0ODAoPeNqNkT9vgzAQxXd/Cktd2sEIHBSlSJbaAooikUBKWnXo4riXxCoYZJukyacvBKL+U
	YcOt9y7+9179tVq1+BUWEx97PoBdQNKcRitMHW9WxSBEVrWVlaKhbo6vOHrHPQe9M1rgOM9Lxrea
	Uh0msOFlXtgVjeAQg1nKeIWWMcinkuoj8JK2XZuwUtgW77WEgrHWK7FCQ7mXd4JXm+hlEo6oioHb
	t7qFjTb8MLA0EukAGVgdazhzArT+Tx+DGf3yeVEPOey+MeNrxi986InP4M2XY+ilqMsKK4ExB+11
	MdvmTxCRyjVW66k6RnhBY7z2jk5lVOh/slmEXtIpznJluOUZHG2JC/xeIryeMHaIonn+/5o4k6Gg
	IumXINON0+mNcKIh4bELSaZRT83Bulvd1mjxY4b+P0Tn2RmqBEwLAIUWoqnjmBmw7ngCz8NMBqSP
	3mj1+QCFAInBV184hXH6pF5Nsp9gMHi6bJ1X02fr

	New Installation
	JDBC Connection:
	  PostgreSQL: jdbc:postgresql://10.44.85.26:64320/crowd
	  
	Choose Name: Pepco Capgemini POC, leave defaults
	admin: p..p...

	END OF WIZARD

	test user login : pepco:pepcom Optionally configure email notifications

	CONFIGURE CROWD

	1) Add applications: JIRA

		in Crowd add application to manage: name: jira, password: pepco, URL: http://10.44.85.93:8080/jira, IP: 10.44.85.93, then select Pepco Capgemini POC, Allow all users to authenticate against JIRA
		in Crowd create necessary groups for JIRA: Groups-Add group:	https://confluence.atlassian.com/crowd/integrating-crowd-with-atlassian-jira-192625.html
			groups jira-administrators, jira-developers, jira-users
		in JIRA enable application access: Applications-> Add group: jira-users
		in JIRA: turn on Crowd as User Directory
			User Management - User Directory-> Add Directory -> Atlassian Crowd, Pepco Capgemini POC, jira:pepco,  http://10.44.85.92:8095/crowd
			After that synchronise -> Directory, edit sync time=1
		in Crowd add default group membership: Directory-> Options-> jira-users

	2) Add applications: CONFLUENCE
			in Crowd add application to manage: name: confluence, password: pepco, URL: http://10.44.85.26:8090/confluence, IP: 10.44.85.26, then select Pepco Capgemini POC, Allow all users to authenticate against JIRA
			in Crowd create necessary groups for Confluence Groups-Add group :https://confluence.atlassian.com/crowd/integrating-crowd-with-atlassian-confluence-198573.html,
				groups: confluence-users,confluence-administrators
			in Crowd add default group membership: Directory-> Options-> confluence-users
			in Confluence: user Directories -> Add Directory -> http://10.44.85.92:8095/crowd, confluence:pepco, Synchronise,edit sync time=1

	At this point any user created in Directory should have access to both jira and confluence apps and after login should also be added to jira-users and confluence-users groups.
	Jira-users is the group membership that allows login to JIRA.

	Tests in Crowd:

	1) Add user

		Add user->foo_foo, directory Pepco Capgemini POC
		Assert User Applications should be: jira and confluence
		Login to JIRA
		Login to Confluence.

	2) Add group


4) APACHE: https://confluence.atlassian.com/kb/proxying-atlassian-server-applications-with-apache-http-server-mod_proxy_http-806032611.html

Create Basic Config:

	from system yum: http://httpd.apache.org/docs/current/install.html

	sudo yum install httpd
	sudo systemctl enable httpd
	sudo systemctl start httpd

	SUSE makes it hard: - run this on apache to allow initiation of connections from apache
	/usr/sbin/setsebool -P httpd_can_network_connect 1
		
	touch /etc/httpd/conf.d/pepco-vhost.conf
	vi /etc/httpd/conf.d/pepco-vhost.conf

Change IP addresses:

<VirtualHost *:80>
	ServerName de-muc-zensus-docker-09

	#RewriteEngine On
	#RewriteCond %{HTTPS} off
	#RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]

	Redirect 301 "/" "http://de-muc-zensus-docker-09/jira"

	ProxyRequests Off
	ProxyVia Off

	<Proxy *>
		 Require all granted
	</Proxy>

	ProxyPass /confluence http://10.44.85.92:8090/confluence
	ProxyPassReverse /confluence http://10.44.85.92:8090/confluence

	ProxyPass /jira http://10.44.85.26:8080/jira
	ProxyPassReverse /jira http://10.44.85.26:8080/jira

	ProxyPass /crowd http://10.44.85.93:8095/crowd
	ProxyPassReverse /crowd http://10.44.85.93:8095/crowd
</VirtualHost>

systemctl restart httpd

Test:

 Go to: http://de-muc-zensus-docker-09/jira
 Go to: http://de-muc-zensus-docker-09/confluence
 Go to: http://de-muc-zensus-docker-09/crowd

Create SSL Config:

	GET CERTIFICATES

	Implementing certificate for de-muc-zensus-docker-09 on Apache: https://wiki.centos.org/HowTos/Https
	
	yum install mod_ssl openssl
	openssl genrsa -out ca.key 2048 
	openssl req -new -key ca.key -out ca.csr
	openssl x509 -req -days 365 -in ca.csr -signkey ca.key -out ca.crt
	cp ca.crt /etc/pki/tls/certs
	cp ca.key /etc/pki/tls/private/ca.key
	cp ca.csr /etc/pki/tls/private/ca.csr
	
	EDIT SSL CONF FOR APACHE:
	
	vi +/SSLCertificateFile /etc/httpd/conf.d/ssl.conf
	SSLCertificateFile /etc/pki/tls/certs/ca.crt
	SSLCertificateKeyFile /etc/pki/tls/private/ca.key

	systemctl restart httpd
	
	CREATE VIRTUAL HOST CONFIG FOR APACHE:
	
	[root@de-muc-zensus-docker-09 atlassian-crowd-3.7.0]# cp /etc/httpd/conf.d/pepco-vhost.conf /etc/httpd/conf.d/pepco-vhost-ssl.conf
	[root@de-muc-zensus-docker-09 atlassian-crowd-3.7.0]# vi /etc/httpd/conf.d/pepco-vhost-ssl.conf

	Ensure we redirect main URL
	
	<VirtualHost *:443>
        SSLEngine on
        SSLCertificateFile /etc/pki/tls/certs/ca.crt
        SSLCertificateKeyFile /etc/pki/tls/private/ca.key

        ServerName de-muc-zensus-docker-08

        Redirect "/" "/jira"

        ProxyRequests Off
        ProxyVia Off

        <Proxy *>
                 Require all granted
        </Proxy>

        ProxyPass /confluence http://10.44.85.26:8090/confluence
        ProxyPassReverse /confluence http://10.44.85.26:8090/confluence

        ProxyPass /jira http://10.44.85.93:8080/jira
        ProxyPassReverse /jira http://10.44.85.93:8080/jira

        ProxyPass /crowd http://10.44.85.92:8095/crowd
        ProxyPassReverse /crowd http://10.44.85.92:8095/crowd
	</VirtualHost>
	
	systemctl restart httpd

	Test - should all open main page with https:

	 Go to: http://de-muc-zensus-docker-09/jira
	 Go to: http://de-muc-zensus-docker-09/confluence
	 Go to: http://de-muc-zensus-docker-09/crowd
 
	
	
    CONFIGURE SERVICES TO TALK BACK TO APACHE ON 443 and also ADJUSTING THEIR BASE URLS


	CROWD:
	
	vi /opt/crowd/atlassian-crowd-3.7.0/apache-tomcat/conf/server.xml
	
	Change:  <Connector port="8009" enableLookups="false" redirectPort="8443" protocol="AJP/1.3" /> to
			 <Connector scheme="https" proxyName="de-muc-zensus-docker-08" port="8009" enableLookups="false" redirectPort="8443" protocol="AJP/1.3" />

	
	/opt/crowd/atlassian-crowd-3.7.0/stop_crowd.sh
	/opt/crowd/atlassian-crowd-3.7.0/start_crowd.sh
	
	Test: log in to crowd: pepco:pecpos
	
	Update BaseURL to: https://de-muc-zensus-docker-08/crowd

	JIRA
	
		docker container stop jira6 && docker container rm jira6
		docker run -e  ATL_TOMCAT_SCHEME=https  -e ATL_PROXY_PORT=443 -e ATL_PROXY_NAME=de-muc-zensus-docker-08 -e ATL_TOMCAT_CONTEXTPATH=/jira -v jiraConfigVolume:/opt/atlassian/jira/conf -v jiraVolume:/var/atlassian/application-data/jira --name="jira6" -d -p 8080:8080 atlassian/jira-software
		Log in to JIRA: set BaseURl to DNS: e.g. System->  https://de-muc-zensus-docker-08/jira
			
	CONFLUENCE
		docker container stop confluence8 && docker container rm confluence8
		docker run -e ATL_TOMCAT_SCHEME=https -e ATL_PROXY_PORT=443 -e ATL_PROXY_NAME=de-muc-zensus-docker-08 -e ATL_TOMCAT_CONTEXTPATH=/confluence -v confluenceConfigVolume:/opt/atlassian/confluence/conf -v confluenceVolume:/var/atlassian/application-data/confluence --name="confluence8" -d -p 8090:8090 -p 8091:8091 atlassian/confluence-server
		set BaseURl to DNS: e.g. https://de-muc-zensus-docker-08/confluence

	Tests in Crowd:

	1) Add user

		Add user->foo_foo, directory Pepco Capgemini POC, wait 60s to sync
		Assert User Applications should be: jira and confluence
		Login to JIRA
		Login to Confluence.

	
CREATE APP LINKS:

	Confluence - as admin -> Application Links add JIRA: https://de-muc-zensus-docker-08/jira
	JIRA - Applications - Application Links add Confluence: https://de-muc-zensus-docker-08/confluence
	
	This will fail be default because certificate is self-signed, therefore we need to import it to local trust store :) FROM
	if the certificate is self-signed, you can import the certificate into the Java trust store, for the JVM that the local application is using. See Check the SSL certificate location below.
	
	TEST: Create JIRA issue from Confluence, add Filter with JQL
	This will fail because we use self.signed certificate
		Proper way to handle that is to mount certificate to container so it is available and improt it into main JAVA store.  

		JIRA
		
		    docker volume create store
			docker volume inspect stores
			#copy cert to docker mount
			cp ca.crt  /var/lib/docker/volumes/store/_data/
			#start container
			#mount certificate to container on run			
			docker run -v store:/store -e  ATL_TOMCAT_SCHEME=https  -e ATL_PROXY_PORT=443 -e ATL_PROXY_NAME=de-muc-zensus-docker-08 -e ATL_TOMCAT_CONTEXTPATH=/jira -e JVM_MAXIMUM_MEMORY=2048m -v jiraConfigVolume:/opt/atlassian/jira/conf -v jiraVolume:/var/atlassian/application-data/jira --name="jira6" -d -p 8080:8080 atlassian/jira-software
			#verify it is there, better use names for containers
			docker exec -it jira6 ls /store
			#or to automate use
			[root@de-muc-zensus-docker-07 ~]# docker exec -it jira6 /opt/java/openjdk/jre/bin/keytool -import -alias proxy_cert -file /store/ca.crt -keystore /opt/java/openjdk/jre/lib/security/cacerts -noprompt
			keystore password: "changeit" Certificate was added to keystore
			#restart same container (if you remove it then you need to reimport certs)
			docker container stop jira6 
			docker container start jira6

		
		CONFLUENCE:
			docker volume create store
			docker volume inspect stores
			docker run -v store:/store -e ATL_TOMCAT_SCHEME=https -e ATL_PROXY_PORT=443 -e ATL_PROXY_NAME=de-muc-zensus-docker-08 -e ATL_TOMCAT_CONTEXTPATH=/confluence -e JVM_MAXIMUM_MEMORY=2048m -v confluenceConfigVolume:/opt/atlassian/confluence/conf -v confluenceVolume:/var/atlassian/application-data/confluence --name="confluence8" -d -p 8090:8090 -p 8091:8091 atlassian/confluence-server
			(...)
			 docker exec -it confluene8 /opt/java/openjdk/jre/bin/keytool -import -alias proxy_cert -file /store/ca.crt -keystore /opt/java/openjdk/jre/lib/security/cacerts -noprompt
			 docker container stop confluence8 
			 docker container start confluence8
		
			To be able to link Confluence Pages to JIRA tickets https://confluence.atlassian.com/doc/enabling-the-remote-api-150460.html



			Test: link in jira ticket Confluence Page	
			Test: search for a ticket
			Create new ticket from Confluence:
		
5) PARAMS Check

	verify JVM_MAXIMUM_MEMORY is ok, put it large enough

6) XRAY

	in JIRA install plugin, verify creation of JIRA project for XRAY

7) STARTUP/STOP

	Use:
	
	docker container stop jira6 
	docker container start jira6
	
	If you recreate containers you need to re-import certificates

8) Add banners so users can easily move via sites
	
	END OF BASE_INSTALL ################################

	1) in Crowd Create group xray-admins, add pepco
	2) JIRA manage apps XRAY
	
3. Install xray (get license)
   Enable 1 group to manage Xray:
   Manage Apps -> User Groups allowed to add Xray Issue Type -> jira-admins (xray-admins)
   1. Create new project SCRUM e.g. ANGEL
   2. Add all tixket types (forst enable user to do that
   
    Project Settings -> Actions -> Add all Xray issue types
	
	
	
	//Jenkins and Xray links
3. Download conenctor for jenkins: https://confluence.xpand-it.com/display/XRAY21/Xray+for+JIRA+Jenkins+Plugin?preview=/19694048/19694049/xray-for-jira-connector.hpi and install manually
   (watch out for a minimum version of JIRA)
4. Manage Jenkins > Configure System > Xray for Jira configuration. - configure jira link
5. Create mvn repo with junit

mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=xray-tests -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
Create new github repo - junit
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/gabrielstar/junit.git
git push -u origin master

6. Install test analyzer plugin https://wiki.jenkins.io/display/JENKINS/Test+Results+Analyzer+Plugin
7. Configure step of freestle job

https://github.com/gabrielstar/junit.git
branch /*master
invoke top level targets
clean
test
-DmaxUsers="$maxUsers"

Add post-build action:

Publish test results:

target/surefire-reports/*AppTest.xml

8. Configura xray plugin:

format: junit XML
file: target/surefire-reports/TEST-com.mycompany.app.AppTest.xml
project key: angel

--- cucumber
 
 * create maven project from script
 * Create git repo
 * Add all to git
 
 add 
 <dependencies>
    <dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>cucumber-java</artifactId>
        <version>2.3.1</version>
        <scope>test</scope>
    </dependency>
</dependencies>

1. Create src/test/resources/cuc to keep feature files#
2. Mark directory as test resources root
3. Create hello.feature file (it must have Feature: otherwise error is thrown)

Feature: MyFeature

  Scenario: First Hello
    Given I have first task
    When I attempt to solve it
    Then I surely succeed

1. Create src/test/java/BaseRunner.java


@RunWith(Cucumber.class)
@CucumberOptions(plugin = {"pretty"})
public class BaseRunner {

}








 
 










